<style>
    .success-message {
        color: green;
    }
</style>
@extends('layouts.new-app')

@section('content')
<div class="flex justify-between">
    <!-- Vulnerability Details Section -->
    <div class="w-1/3 bg-gray-200 rounded-2xl mr-4 shadow-md p-1">
        
    @if ($vulnerability->name === 'Security Misconfiguration')
    <x-security-misconfig></x-security-misconfig>
    @elseif($vulnerability->name === 'Weak Session Id')
    
    <x-vulnerable-sessions></x-vulnerable-sessions>
    @endif
    
        
    </div>
   

    <!-- Practice Section -->
    <div class="w-2/3 bg-white rounded-lg shadow-md p-6">
        
        <div class="mb-8">
            
            
                
            @if ($vulnerability->id === 4)
                
            <div class="p-4 m-2 rounded-lg shadow-lg bg-gray-100 border-2 border-blue-900 font-mono">
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p class="text-gray-700 p-4 font-bold text-xl font-mono ">
                        Welcome back, <span class="text-red-600 text-1g">{{ Auth::user()->name }}</span>, to the Security Misconfigurations Section.
                    </p>
                </div>
                <p class="mb-3 text-2xl font-bold "><span class="text-red-500">Lesson: Understanding Security Misconfigurations </span></p>
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p>Security misconfigurations pose a significant risk to the integrity and security of web applications. 
                        They can occur at various levels of the application stack, including the database server, third-party libraries, and custom code settings.
                         A security misconfiguration arises when a system or application is not properly configured, leaving it vulnerable to exploitation by attackers.</p>
                </div>

                <p class="mb-3 text-2xl ">Impact of Security Misconfigurations:</p>
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p>The impact of security misconfigurations can vary depending on the specific configuration being exploited. 
                        However, common consequences include unauthorized access to sensitive data, system breaches,
                         and potential compromise of the entire application or system.</p>
                </div>

                <p class="mb-3 text-2xl">Exploitation by Attackers:</p>
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p>
                    Attackers exploit security misconfigurations by leveraging default login credentials or exploiting vulnerabilities in operating systems and public services
                     (e.g., databases, file-sharing services). 
                    By doing so, they gain unauthorized access to critical systems, sensitive data, or gain insight into the system's vulnerabilities.
                    </p>
                </div>
                
                <p class="mb-3 text-2xl">Common Scenarios of Exploitation:</p>
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p>
                    Default Login Credentials: Attackers attempt to log in using <span class="text-red-500">default usernames such as (Admin, root, administrator)  and passwords such as (12345678, qwertyui, password)</span> to gain unauthorized access to the application or system.
                    Unpatched Flaws: Exploiting known vulnerabilities or unpatched flaws in the system to bypass security measures and gain access.
                    Unprotected Files and Directories: Accessing unprotected files or directories that contain sensitive information or configuration details.
                    </p>
                </div>
                
            </div>


            
            @elseif ($vulnerability->id === 1)
            <div class="p-4 m-2 rounded-lg shadow-lg bg-gray-100 border-2 border-blue-900 font-mono">
                <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                    <p class="text-gray-700 p-4 font-bold text-xl font-mono ">
                        Welcome back, <span class="text-red-600 text-1g">{{ Auth::user()->name }}</span>, to Weak Session IDs Section.
                    </p>

                    <p class="mb-3 text-3xl font-bold "><span class="text-gray-500">Introduction </span></p>
                    <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                        <p>
                        {{ $vulnerability->description }}
                        </p>
                    </div>

                    <p class="mb-3 text-2xl font-bold "><span class="text-blue-500">Low Level  </span></p>
                    <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                        <p>
                        This button generates a weak session ID with a low vulnerability level. When clicked, it sets a new cookie called SessionID,
                         incrementing the last session ID stored in the server-side session data. This vulnerable implementation allows attackers to easily guess session IDs, 
                         potentially leading to session hijacking or unauthorized access to user accounts. 
                        </p>
                    </div>

                    <p class="mb-3 text-2xl font-bold "><span class="text-yellow-500">Medium Level  </span></p>
                    <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                        <p>
                        This button generates a weak session ID with a medium vulnerability level.
                         When clicked, it sets a new cookie called UnixTimeSession, using the current Unix timestamp
                          as the session ID. While using timestamps as session IDs might seem secure at first glance, 
                          it still exposes vulnerabilities such as session fixation attacks, where an attacker can force
                           a user to use a known session ID.  
                        </p>
                    </div>

                    <p class="mb-3 text-2xl font-bold "><span class="text-red-500">Higle Level  </span></p>
                    <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                        <p>
                        This button generates a weak session ID with a medium vulnerability level.
                        This button generates a weak session ID with a high vulnerability level. When clicked, 
                        it sets a new cookie called MD5IdSession, using the MD5 hash of an incrementing session ID.
                         While MD5 hashing adds some level of security, MD5 is considered cryptographically weak,
                          making it susceptible to brute force attacks and collision vulnerabilities.
                         Attackers could potentially reverse engineer the session ID from the MD5 hash, leading to session compromise. 
                        </p>
                    </div>

                    <p class="mb-3 text-2xl font-bold "><span class="text-red-800">Impossible Level  </span></p>
                    <div class="text-1g mb-4 bg-white p-4 rounded-2xl">
                        <p>
                        Objective: At this level, the session ID value should be entirely unpredictable.
                         However, feel free to attempt to crack it. Despite its apparent randomness, 
                         understanding the factors influencing its generation provides valuable insights into strengthening
                          session security.

                        </p>
                    </div>
                    
                </div>
            


            </div>
            @elseif ($vulnerability->id === 2)
                <h1>This is an Insecure Direct Object References (IDOR) Vulnerability</h1>
            @else
                <h1>This is a NOT YET CONFIG Vulnerability</h1>

                <div class="mb-8">
            <h3 class="text-lg font-semibold">Fix the Vulnerability</h3>
            <p>Try fixing the vulnerability in this code snippet.</p>
            <!-- Add your game HTML here -->
            <!-- For example, show a code snippet with a vulnerability and ask users to fix it -->
        </div>
        <div>
            <h3 class="text-lg font-semibold">Quiz Time!</h3>
            <p>Test your knowledge with a quiz on this vulnerability.</p>
            <!-- Add your game HTML here -->
            <!-- For example, create a quiz with questions related to the vulnerability -->
        </div>

        <p class="mt-2">What vulnerability exists in this code snippet?</p>
            <!-- User input field -->
            <input type="text" class="border border-gray-300 rounded-lg px-4 py-2 mt-2" placeholder="Your answer...">
            <!-- Submit button -->
            <button class="bg-blue-500 text-white px-4 py-2 rounded-lg mt-2 hover:bg-blue-600">Submit</button>
            @endif

            
            
        </div>

        
    </div>
</div>
@endsection

