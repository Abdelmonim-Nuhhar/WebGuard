<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;


use App\Models\Vulnerability;
use App\Http\Requests\StoreVulnerabilityRequest;
use App\Http\Requests\UpdateVulnerabilityRequest;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;

use App\Models\Flag;
use Illuminate\Validation\Rule;

use Illuminate\Support\Facades\Auth;
use App\Models\User;






class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $vulnerabilities = Vulnerability::all();
        return  view('vulnerabilities',['vulnerabilities'=>$vulnerabilities]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $this->authorize('create', Vulnerability::class);
          return view('ManageVulnerability');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreVulnerabilityRequest $request)
    {
        // Validate the request
        $validated = $request->validated();

        // Create a new Vulnerability instance
        $vulnerability = new Vulnerability();
        $vulnerability->name = $request->name;
        $vulnerability->description = $request->description;
        $vulnerability->severity = $request->severity;
        $vulnerability->mitigation = $request->mitigation;
        $vulnerability->is_fixed = $request->is_fixed;

        // Save the vulnerability
        $vulnerability->save();

        // Redirect back to the vulnerabilities index page
        return redirect()->route('index')->with('success', 'Vulnerability added successfully!');
    }

    /**
     * Display the specified resource.
     */
    public function show(int  $id)
    {
        $vulnerability = Vulnerability::find($id);
        return view('vulnerability',['vulnerability'=>$vulnerability]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(int  $id)
    {
        $vulnerability = Vulnerability::find($id);
        return view('components.vulnerability-edit-form', ['vulnerability'=>$vulnerability]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateVulnerabilityRequest $request, $id)
    {
        $vulnerability = Vulnerability::find($id);
        $validated = $request->validated();

        //Update  the  Vulnerability 
        $vulnerability->id = $request->id;
        $vulnerability->name = $request->name;
        $vulnerability->description = $request->description;
        $vulnerability->severity = $request->severity;
        $vulnerability->mitigation = $request->mitigation;
        $vulnerability->is_fixed = $request->is_fixed;

        // Save the vulnerability
        $vulnerability->save();

        // Redirect back to the vulnerabilities index page
        return redirect()->route('index')->with('success', 'Updated successfully!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        $vulnerability = Vulnerability::find($id);
        $vulnerability->delete();
        return response()->json(["msg" => "success"]);
    }

    public function home()
    {
        return view('welcome');
    }
    public function about()
    {
        return view('about');
    }

    

    public function resources()
    {
        return view('resources');
    }
    public function contact()
    {
        return view('contact');
    }

    //session shows 
    public function showBasicLevel()
    {
        return view('sessionid-basic-level');
    }

    public function showIntermediateSession()
    {
        return view('show-intermediate-session');
    }    

    public function showAdvanceSession()
    {
        return view('show-advance-session');
    }
    public function showChallengeSession()
    {
        return view('show-challenge-session');
    }


    public function generateWeakSessionLow(Request $request)
    {
        $sessionId = Session::has('last_session_id') ? Session::get('last_session_id') + 1 : 1;
        Session::put('last_session_id', $sessionId);
        $cookieValue = $sessionId;
    
        // Define the $fileContent variable
        $fileContent = '';
    
        if ($request->has('found_session_id') && $request->found_session_id == $cookieValue) {
            // Read the file content
            $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\low_level_source_code.txt');
    
            // Pass the vulnerability level and file content to the view
            return view('found_session_id', [
                'found_session_id' => $cookieValue,
                'vulnerabilityLevel' => 'Low',
                'fileContent' => $fileContent,
                'message' => 'Session ID is: ' . $cookieValue, // Include the message
            ]);
        }
    
        // Redirect back with a message
        return redirect()->back()->with('message', 'Session ID is: ' . $cookieValue);
    }
    
    public function generateWeakSessionMedium(Request $request)
    {
        $cookieValue = time();
        $cookieValue = floor($cookieValue / 60) * 60;
    
        if ($request->has('found_session_id_medium') && $request->found_session_id_medium == $cookieValue) {
            
            // Read the file content
            $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\medium_level_source_code.txt');
            // Pass the vulnerability level to the view
            return view('found_session_id', [
                'found_session_id' => $cookieValue,
                 'vulnerabilityLevel' => 'Medium',
                 'fileContent' => $fileContent,
                 'message' => 'Session ID is: ' . $cookieValue, // Include the message
            ]);
        }
    
        // Redirect back with a message
        return redirect()->back()->with('message', 'Session ID is: ' . $cookieValue);
    }
    
    public function generateWeakSessionHigh(Request $request)
    {
        $sessionId = Session::has('last_session_id_high') ? Session::get('last_session_id_high') + 1 : 1;
        Session::put('last_session_id_high', $sessionId);
        $cookieValue = md5($sessionId);
    
        if ($request->has('found_session_id_high') && $request->found_session_id_high == md5($sessionId)) {
    
            // Read the file content
            $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\medium_level_source_code.txt');
            // Pass the vulnerability level to the view
            return view('found_session_id', [
                'found_session_id' => $cookieValue, 
                'vulnerabilityLevel' => 'High',
                'fileContent' => $fileContent,
                'message' => 'Session ID is: ' . $cookieValue, // Include the message
            ]);
        }
    
        // Redirect back with a message
        return redirect()->back()->with('message', 'Session ID is: ' . $cookieValue);
    }
    
    public function generateWeakSessionImpossible(Request $request)
    {
        if ($_SERVER['REQUEST_METHOD'] == "POST") {
            $cookieValue = sha1(mt_rand() . time() . "Impossible");
            setcookie("impoSession", $cookieValue, time() + 3600, "/vulnerabilities/weak_id/", $_SERVER['HTTP_HOST'], true, true);
            $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\medium_level_source_code.txt');

            return view('found_session_id', [
                'found_session_id' => $cookieValue,
                'vulnerabilityLevel' => 'Impossible',
                'fileContent' => $fileContent,
                'message' => 'Session ID is: ' . $cookieValue
            ]);
        }
    
        
    }
    
    


    // Handling flags submission

    public function showFlagSubmissionForm()
    {
        // Fetch the vulnerability data from the database
    $vulnerability = Vulnerability::first(); // Adjust this according to your logic

    // Pass the vulnerability data to the view
    return view('showFlagSubmissionForm', compact('vulnerability'));
    }

    public function submitFlag(Request $request)


    {

        
        /* Validate the submitted data
        $request->validate([
            'text' => 'required|string|max:255',
            'level' => 'required|in:low,medium,high,impossible',
        ]);*/

        $request->validate([
            'text' => 'required|string|max:255',
            'level' => [
                'required',
                Rule::in([
                    'Session Id low Security',
                    'Session Id medium Security',
                    'Session Id high Security',
                    'Session Id impossible Security',
                    'File Upload Challenge',
                    'XSS Reflected',
                    'XSS Store',
                    'XSS BaseDom',
                    'Security MisConfig',
                    'SQL basic',
                    'SQL Medium',
                    'SQL Advance',
                ]),
            ],
        ]);

        // Get the vulnerability name based on the level
        $vulnerabilityName = $this->getVulnerabilityName($request->level);
    
        // Check if the submitted flag matches the expected flag for the given vulnerability level
        $expectedFlag = $this->getExpectedFlag($request->level);
    
        if ($request->text === $expectedFlag) {
            // Check if the user has already submitted the flag for this level
            $submittedFlag = $request->text;
            $flag = Flag::where('text', $submittedFlag)
                        ->where('user_id', Auth::id())
                        ->where('level', $request->level)
                        ->first();
    
            if ($flag) {
                // User has already submitted the flag for this level
                return redirect()->route('showFlagSubmissionForm')->with('error', 'You have already submitted the flag for this level.');
            } else {
                // Flag is correct and not previously submitted, save it to the database
                $flag = new Flag();
                $flag->text = $submittedFlag;
                $flag->user_id = Auth::id();
                $flag->level = $request->level;
                $flag->submitted = true;
                $flag->save();
    



                //return redirect()->route('showFlagSubmissionForm')->with('success', 'Congratulations! Flag submitted successfully!');
                return redirect()->route('showFlagSubmissionForm')->with('success', 'Congratulations! Flag submitted successfully!')->with('vulnerabilityName', $vulnerabilityName);

            }
        } else {
            // Flag is incorrect, return an error message
            return redirect()->route('showFlagSubmissionForm')->with('error', 'Incorrect flag. Please try again.')->with('vulnerabilityName', $vulnerabilityName)->with('level', $request->level);
        }
    }
      
    /* Helper method to get the expected flag for a given vulnerability level
    private function getExpectedFlag($level)
    {
        switch ($level) {
            case 'low':
                return '725bc77aa1443d8074e05c7710ef9245';
            case 'medium':
                return '7eab4bebad099e7a4eb0d913f9e307e7';
            case 'high':
                return '1119d47604d28ba9abc28b5d5070870a';
            case 'impossible':
                return 'd868108b0588d07ce90733d43e7e18f0';
                case 'file upload':
                    return 'd868108b0588d07ce90733d43e7e18f0';
            default:
                return null;
        }
    }

    // Helper method to get the vulnerability name based on the level
    private function getVulnerabilityName($level)
    {
        switch ($level) {
            case 'low':
                return 'Low Vulnerability';
            case 'medium':
                return 'Medium Vulnerability';
            case 'high':
                return 'High Vulnerability';
            case 'impossible':
                return 'Impossible Vulnerability';
            default:
                return null;
        }
    }*/


    private function getExpectedFlag($level)
{
    $flags = [
        'Session Id low Security' => 'flag:{725bc77aa1443d8074e05c7710ef9245}',
        'Session Id medium Security' => 'flag:{7eab4bebad099e7a4eb0d913f9e307e7}',
        'Session Id high Security' => 'flag:{1119d47604d28ba9abc28b5d5070870a}',
        'Session Id impossible Security' => 'flag:{d868108b0588d07ce90733d43e7e18f0}',
        'File Upload Challenge' => 'flag{a0e6e4d440a0a618b9bbd94b214cf20f}',
        'XSS Reflected' => 'expected_flag_for_xss_reflected',
        'XSS Store' => 'expected_flag_for_xss_store',
        'XSS BaseDom' => 'expected_flag_for_xss_basedom',
        'Security MisConfig' => 'expected_flag_for_security_misconfig',
        'SQL basic' => 'expected_flag_for_sql_basic',
        'SQL Medium' => 'expected_flag_for_sql_medium',
        'SQL Advance' => 'expected_flag_for_sql_advance',
    ];

    return $flags[$level] ?? null;
}

private function getVulnerabilityName($level)
{
    $names = [
        'Session Id low Security' => 'Low Security Session ID',
        'Session Id medium Security' => 'Medium Security Session ID',
        'Session Id high Security' => 'High Security Session ID',
        'Session Id impossible Security' => 'Impossible Security Session ID',
        'File Upload Challenge' => 'File Upload Vulnerability',
        'XSS Reflected' => 'Reflected XSS',
        'XSS Store' => 'Stored XSS',
        'XSS BaseDom' => 'DOM-based XSS',
        'Security MisConfig' => 'Security Misconfiguration',
        'SQL basic' => 'Basic SQL Injection',
        'SQL Medium' => 'Medium SQL Injection',
        'SQL Advance' => 'Advanced SQL Injection',
    ];

    return $names[$level] ?? "Unknown Vulnerability";
}




    

    //xss vulnerability
    

    public function reflectedXSS()
    {
        // Retrieve user input from the request without any filtering
        $name = isset($_GET['name']) ? $_GET['name'] : '';

        $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\xss_low_source_code.txt');
    
        // Pass the user input and file content to the view
        return view('reflected-xss', compact('name', 'fileContent'));
    }

    public function reflectedXSSMedium()
    {
        // Retrieve user input from the request
        $name = request()->input('name');
    
        // Apply custom filter to remove <script> tags
        $name = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $name);
    
        // Get file content
        $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\xss_medium_source_code.txt');
    
        // Pass the user input and file content to the view
        return view('reflected-xss-medium', compact('name', 'fileContent'));
    }

    public function reflectedXSSHigh()
    {
        // Retrieve user input from the request
        $name = request()->input('name');

        // Apply custom filter to remove potentially harmful content
        $name = preg_replace('/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $name);

        $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\xss_high_source_code.txt');
    
        // Pass the user input and file content to the view
        return view('reflected-xss-high', compact('name', 'fileContent'));
    }

    public function reflectedXSSImpossible()

    {
        $fileContent = file_get_contents('C:\Users\Hilmee\PP\web-guard\files\xss_impossible_source_code.txt');

        // Check if there is any input
        if (request()->has('name') && request()->input('name') !== null) {
            // Check Anti-CSRF token
            $userToken = request()->input('user_token');
            $sessionToken = Session::token();
            $this->checkToken($userToken, $sessionToken);

            // Get input and sanitize it
            $name = htmlspecialchars(request()->input('name'));


    
            // Pass the user input and file content to the view
            return view('reflected-xss-impossible', compact('name', 'fileContent'));
        }

        // Generate Anti-CSRF token
        $this->generateSessionToken();
        
        return view('reflected-xss-impossible', ['fileContent' => $fileContent]);

    }

    // Helper method to check Anti-CSRF token
    private function checkToken($userToken, $sessionToken)
    {
        // Implement token checking logic here
    }

    // Helper method to generate Anti-CSRF token
    private function generateSessionToken()
    {
        // Implement token generation logic here
    }

    public function storedXSS()
    {
        // Retrieve stored script from the database (simulate stored XSS)
        $storedScript = "<script>alert('Stored XSS');</script>";

        // Pass the stored script to the view
        return view('stored-xss', compact('storedScript'));
    }


///////////

    public function showLowLevelForm()
    {
        $comments = DB::table('guestbook')->get(); // Retrieve all comments
        return view('storedXSS-low', compact('comments')); // Pass comments to the view
    }

    public function showMediumLevelForm()
    {
        $comments = DB::table('guestbook')->get(); // Retrieve all comments
        return view('storedXSS-medium', compact('comments')); // Pass comments to the view
    }

    public function showHighLevelForm()
    {
        $comments = DB::table('guestbook')->get(); // Retrieve all comments
        return view('storedXSS-high', compact('comments')); // Pass comments to the view
    }

        public function showImpossibleLevelForm()
    {
        $comments = DB::table('guestbook')->get(); // Retrieve all comments
        return view('storedXSS-impossible', compact('comments')); // Pass comments to the view
    }

    public function storeLowLevelComment(Request $request)
    {
        // Retrieve user input from the request without any sanitization
        $message = $request->input('message');
        $name = $request->input('name');

        // Store the raw user input in the database
        DB::table('guestbook')->insert([
            'comment' => $message,
            'name' => $name,
        ]);

        // Redirect back or to another page
        return redirect()->back();
    }

    
        public function storeMediumLevelComment(Request $request)
    {

    // Retrieve user input from the request
        $message = $request->input('message');
        $name = $request->input('name');
        $sanitizedMessage = htmlspecialchars($message); // Convert special characters to HTML entities
        $sanitizedName = htmlspecialchars($name); // Convert special characters to HTM

        // The input is slightly sanitized but still not safe
        DB::table('guestbook')->insert([
            'comment' => $message,
            'name' => $name,
        ]);

        // Redirect back or to another page
        return redirect()->back();
    }

    public function storeHighLevelComment(Request $request)
{
    // Retrieve user input from the request
    $message = $request->input('message');
    $name = $request->input('name');

    // Sanitize user input
    $sanitizedMessage = htmlspecialchars($message, ENT_QUOTES, 'UTF-8'); // Convert special characters to HTML entities
    $sanitizedName = htmlspecialchars($name, ENT_QUOTES, 'UTF-8'); // Convert special characters to HTML entities

    // Remove potentially harmful content
    $sanitizedMessage = preg_replace('/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $sanitizedMessage);

    // The input is now sanitized and potentially harmful content is removed
    DB::table('guestbook')->insert([
        'comment' => $sanitizedMessage,
        'name' => $sanitizedName,
    ]);

    // Redirect back or to another page
    return redirect()->back();
}

public function storeImpossibleLevelComment(Request $request)
{

    // Retrieve user input from the request and manually sanitize
    $message = htmlspecialchars(strip_tags($request->input('message')), ENT_QUOTES, 'UTF-8');
    $name = htmlspecialchars(strip_tags($request->input('name')), ENT_QUOTES, 'UTF-8');

    // Update database
    DB::table('guestbook')->insert([
        'comment' => $message,
        'name' => $name,
    ]);

    // Redirect back or to another page
    return redirect()->back();
}

    /*Remove the stored data to prevent the accumulation of potentially harmful scripts
        and clear all data in the database to enable users to move on and practice the next level.
        */
    public function clearGuestbook()
    {
        // Delete all records from the guestbook table
        DB::table('guestbook')->delete();
    
        // Redirect back to the guestbook page with a success message
        return redirect()->back()->with('success', 'All data has been cleared.');
    }
    

    //dom xss
    public function showDOMXSSLowLevelForm()
    {
        // Retrieve any necessary data
        $data = [];

        // Render the view for the low level DOM-based XSS vulnerability
        return view('domXSS-low', $data);
    }

//////

    



}
