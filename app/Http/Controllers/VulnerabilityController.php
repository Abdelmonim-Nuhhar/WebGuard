<?php

namespace App\Http\Controllers;

use App\Models\Vulnerability;
use App\Http\Requests\StoreVulnerabilityRequest;
use App\Http\Requests\UpdateVulnerabilityRequest;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;


class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $vulnerabilities = Vulnerability::all();
        return  view('vulnerabilities',['vulnerabilities'=>$vulnerabilities]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $this->authorize('create', Vulnerability::class);
          return view('ManageVulnerability');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreVulnerabilityRequest $request)
    {
        // Validate the request
        $validated = $request->validated();

        // Create a new Vulnerability instance
        $vulnerability = new Vulnerability();
        $vulnerability->name = $request->name;
        $vulnerability->description = $request->description;
        $vulnerability->severity = $request->severity;
        $vulnerability->mitigation = $request->mitigation;
        $vulnerability->is_fixed = $request->is_fixed;

        // Save the vulnerability
        $vulnerability->save();

        // Redirect back to the vulnerabilities index page
        return redirect()->route('index')->with('success', 'Vulnerability added successfully!');
    }

    /**
     * Display the specified resource.
     */
    public function show(int  $id)
    {
        $vulnerability = Vulnerability::find($id);
        return view('vulnerability',['vulnerability'=>$vulnerability]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(int  $id)
    {
        $vulnerability = Vulnerability::find($id);
        return view('components.vulnerability-edit-form', ['vulnerability'=>$vulnerability]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateVulnerabilityRequest $request, $id)
    {
        $vulnerability = Vulnerability::find($id);
        $validated = $request->validated();

        //Update  the  Vulnerability 
        $vulnerability->id = $request->id;
        $vulnerability->name = $request->name;
        $vulnerability->description = $request->description;
        $vulnerability->severity = $request->severity;
        $vulnerability->mitigation = $request->mitigation;
        $vulnerability->is_fixed = $request->is_fixed;

        // Save the vulnerability
        $vulnerability->save();

        // Redirect back to the vulnerabilities index page
        return redirect()->route('index')->with('success', 'Updated successfully!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        $vulnerability = Vulnerability::find($id);
        $vulnerability->delete();
        return response()->json(["msg" => "success"]);
    }

    public function home()
    {
        return view('welcome');
    }
    public function about()
    {
        return view('about');
    }

    public function resources()
    {
        return view('resources');
    }
    public function contact()
    {
        return view('contact');
    }


     /**
     * Generate a weak session ID with low vulnerability level.
     */
    public function generateWeakSessionLow(Request $request)
    {
        $sessionId = Session::has('last_session_id') ? Session::get('last_session_id') + 1 : 1;
        Session::put('last_session_id', $sessionId);
        $cookieValue = $sessionId;
    
        if ($request->has('found_session_id') && $request->found_session_id == $cookieValue ) {
            //return response()->json(['correct-checked' => $cookieValue]);
            return view('found_session_id',['found_session_id'=>$cookieValue]);
        }
    
        
     Session::flash('alert', 'Session ID is:  ' . $cookieValue);

    // Redirect back
    return redirect()->back();
    }
    

    public function generateWeakSessionMedium(Request $request)
    {
        $cookieValue = time();
        $cookieValue = floor($cookieValue / 60) * 60;
    
        if ($request->has('found_session_id_medium') && $request->found_session_id_medium == $cookieValue ) {
            return view('found_session_id',['found_session_id'=>$cookieValue]);
        }
    
        Session::flash('alert', 'Session ID is:  ' . $cookieValue);
    
        return redirect()->back();
    }
    
    public function generateWeakSessionHigh(Request $request)
    {
        $sessionId = Session::has('last_session_id_high') ? Session::get('last_session_id_high') + 1 : 1;
        Session::put('last_session_id_high', $sessionId);
        $cookieValue = md5($sessionId);
    
        if ($request->has('found_session_id_high') && $request->found_session_id_high == md5($sessionId) ) {
            return view('found_session_id',['found_session_id'=>$cookieValue]);
        }
    
        Session::flash('alert', 'Session ID is:  ' . $cookieValue);
    
        return redirect()->back();
    }
    
    public function generateWeakSessionImpossible(Request $request)
    {
        if ($_SERVER['REQUEST_METHOD'] == "POST") {
            $cookie_value = sha1(mt_rand() . time() . "Impossible");
            setcookie("impoSession", $cookie_value, time()+3600, "/vulnerabilities/weak_id/", $_SERVER['HTTP_HOST'], true, true);
            return redirect()->route('found_session_id');
        }
    
        // Return any additional data or response as needed.
    }

    

}
